p In this practical 2-day workshop you will learn how to test and design real-world Java applications using Test-Driven Development (TDD). Throughout the course, you'll be developing a Java software system using Test-Driven Development and the modern Java testing tools. Guided by an expert mentor, you'll learn how to overcome challenges that developers face when applying TDD in "the real world" environment.

h2 Coverage

ul
    li 
        strong How to perform unit testing, mocking, and stubbing with JUnit 5 and Mockito
    li
        strong How to write good unit tests using F.I.R.S.T. principles
    li
        strong How to test time, data, singletons, statics etc.
    li
        strong How to test behavior-less classes, getters, setters &amp; co.
    li
        strong How to test integrations with the filesystem, databases, smtp servers, queues
    li
        strong How to test external web services and gRPC integration with test doubles
    li 
        strong How to write good acceptance tests (ATs) and how to find balance with unit tests (and UI tests, if they exist)
    li
        strong How to create fast, isolated, and repeatable, acceptance testing environments with Docker and Testcontainers
    li
        strong How to test asynchronous code, systems, and Web APIs
    li 
        strong How to test database migrations
    li 
        strong How to get started with Test-Driven Development (TDD) and why "test-first" beats "test-last" approach
    li 
        strong How to design object relationships with CRC cards
    li     
        strong How to design systems with Acceptance Test-Driven Development (ATDD) and BDD
    li 
        strong How to use TDD and ATDD in legacy systems to make fearless and non-breaking code changes
    li 
        strong How to integrate TDD and ATDD into QA process, and how to organize effective ATDD/BDD process

p &nbsp;

p You will also learn why customers don’t like writing BDD specifications, why developers and test engineers usually have two separate test suites (and what to do about it), when Test-Driven Development should be avoided, how to “sell” TDD to your team, and much more!

p: strong The course is highly recommended for teams that work together.