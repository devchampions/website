p This practical training will teach you how to write clean and readable code in Java 16. Through a series of hands-on and easy-to-follow refactorings, you will learn all fundamental principles and patterns that every seasoned Javist should know to write good code. This course is a fast-track to the knowledge that usually takes years to master: OOP, OOA&amp;D, FP, GoF Patterns, DDD Patterns, Implementation Patterns, SOLID, GRASP.

p Throughout this course we’ll be refactoring code smells taken from real production codebases. This ensures that everything you’ll learn here will be immediately applicable at your daily work. 

h2 Highlights

ul
    li The course will demonstrate not only plain Java refactorings, but also refactoring of enterprise code that uses Spring
    li The course will provide you with practical advice on how to get out of technical debt (without big rewrites)
    li Attendees will receive references to books, blogs, and videos for independent self-development

h2 Coverage

ul
    li 
        strong The economics of software design (clean code rationale, design entropy, busting ”quality is expensive” myth, consequences of bad code, maintaining high coding standards, managing technical debt)
    li
        strong The Principles of Readable Code
    li
        strong Refactoring names for better readability
    li
        strong Refactoring functions for reduced cognitive load
    li
        strong Refactoring primitives into value objects
    li
        strong Refactoring classes for better internal structure and The Step-Down Rule
    li 
        strong Refactoring helpers and utils to objects
    li
        strong Refactoring and getting rid of "glue" code
    li
        strong Refactoring eager initialization to lazy initialization
    li 
        strong Refactoring cross-cutting concerns into AOP aspects
    li 
        strong Refactoring null-unsafe code to null-safety and fail-fast principle
    li     
        strong Refactoring to the normalized object hierarchy, Liskov-Substitution Principle, and composition
    li 
        strong Refactoring to the highest (and single) level of abstraction
    li 
        strong Refactoring god objects to high cohesion and Single Responsibility Principle
    li
        strong Refactoring fat interfaces to slim interfaces and Interface Segregation Principle
    li
        strong Refactoring to Open-Closed Principle
    li
        strong Refactoring to Forwarding Collections
    li
        strong Refactoring to The Law of Demeter
    li
        strong Refactoring to loosely-coupled objects with dependency injection and Dependency Inversion Principle
    li
        strong Refactoring domain objects for lower coupling with DDD patterns (Specification, Query, Object Mother, Event, Role)
    li
        strong Refactoring getters and setters to domain-specific methods
    li
        strong Refactoring to GoF design patterns
    li
        strong Refactoring tests using Behaviour-Driven Development
    li
        strong … and much more!

p &nbsp;

p: strong The course is highly recommended for teams that work together.