
h2 Detailed outline

h3 Day 1

p (60 mins) Introduction into DevOps, Continuous Delivery, Infrastructure-as-Code, GitOps
p (10 mins) Quiz 1: principles

p (10 mins) Break

p (10 mins) Why containers? Universal distribution mechanism. 
p (30 mins) Anatomy of a container: processes, network, file system, permissions, health checks  
p (15 mins) Windows containers vs Linux containers

p (10 mins) Break

p (60 mins) Exercise 1: building container image and running containers
|  We take an existing .NET and/or Java web application, package it as a container image and run container locally.
|  Students will also try/get hints on how to debug the application running inside a container, start more that one instance of applications, share files between the host and container.  
|  For those who are less experienced, we only discuss the very basics. For more experienced folks, I will add extra tasks for them to play with.   
p (10 mins) Quiz 2: containers

p (60 mins) Lunch

p (30 mins) Container meshes. Overview of Docker Compose.
p (90 mins) Exercise 2: container meshes
|  Create a container mesh with an application built in previous exercise + HA database server, caching layer server and a software load balancer.
|  Students will learn how to set up container network, manage container volumes, configure port openings, setup health checks. 
|  Overall, the goal is to show how to replicate complex deployment setup with Docker and Docker Compose.  
p (10 mins) Quiz 3: container meshes

p (15 mins) Break

p (30 mins) Introduction to modern delivery pipelines. Containers everywhere!  
p (90 mins) Exercise 3: container delivery
|  Create a continuous delivery pipeline in GitLab CI and/or Azure DevOps Pipelines that will: build a Docker image, run unit tests, run integration tests, publish image into Docker registry.
|  Code for unit and integration tests will be provided. The goal is to focus on implementing the pipeline logic and to show that pipeline stages are, in fact, also running as Docker containers.  
|  More experienced people will have a chance to implement extra steps in the pipeline like static code analysis and performance tests.   
p (10 mins) Quiz 4: pipelines


h3 Day 2

p (30 mins) Cloud as a platform. Introduction to the basics of Azure/AWS cloud resources. 
p (30 mins) Compute models. 5 ways to deploy containers into the cloud. 

p (15 mins) Break

p (90 mins) Exercise 4: deploy to a container service
|  Extend delivery pipeline to deploy to AWS ECS and/or Azure Container Service and verify deployment. 
|  Students will receive pipeline skeleton. I will also give a quick introduction to AWS CLI/Azure CLI as well as provide cheat sheets to help with the exercise. 
|  Experienced folks will try to codify cloud resource management (policies, buckets, databases, load balancers) with the help of Azure Stack/AWS Cloudformation using my templates.     
p (10 mins) Quiz 5: cloud

p (60 mins) Lunch

p (60 mins) Managing complex deployments. Introduction to Kubernetes. Kubernetes primitives: node, pod, service, persistent volume.    
p (90 mins) Exercise 5: deploy to an orchestrator
|  Change delivery pipeline to deploy to AWS EKS and/or Azure Kubernetes Service and verify deployment.
|  Students will receive a template and a cheat sheet to convert their deployment scripts from existing code into Kubernetes YAML descriptor. 
|  We will discuss when plain cloud resources are better than Kubernetes deployment as well as when Kubernetes could be a good idea.    
p (10 mins) Quiz 6: Kubernetes

p (45 mins) Simplifying the stack. Introduction to Serverless. Function-as-a-Service.
p (90 mins) Exercise 6: deploy as a function
|   Package part of the application as a separate container. Change the pipeline to deploy it to AWS Lambda and/or Azure Functions.
|   We will discuss the benefits and billing model behind this approach. Experienced folks may experiment with converting more application parts into the serverless model.  
p (10 mins) Quiz 7: serverless

p (30 mins) Q/A + conclusion