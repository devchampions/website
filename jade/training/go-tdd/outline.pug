
h2 Detailed outline

h3 Day 1: Go language basics

p Preparing working environment: tools, IDE, references
p Introduction to Go syntax: types, vars, consts, functions, loops, conditionals
p Organizing Go code base
p Overview of Go standard library
p Working with data structures: structs, arrays, slices, maps 
p Working with I/O primitives: files, channels
p Working with functional primitives and parallel execution: functions, closures, threads, goroutines
p Introduction to TDD

h3 Day 2: Deep dive into unit testing

p Introduction to TDD: test driven development actually works (Test-first approach, TDD schools: London vs. Detroit)
p Overview of Go testing libraries: testing, testify, gocheck, gopwt
p Organizing test code base (writing readable tests, making error message readable, creating test domain specific languages)
p Using mocks & stubs (with gomock)   

h3 Day 3: Advanced testing techniques

p Unit tests vs integration tests
p Generating test data (with faker)
p Behavior driven development (BDD) with ginkgo
p ATDD (acceptance test driven development) 
p Mutation testing with go-mutetesting

