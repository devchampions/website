p Do you want to feel proud of your work? Write code that your colleagues will admire? Move fast without compromising quality? Build long-living software that is easy and fun to maintain? Get out of technical debt without big upfront time investment? Professionally articulate technical decisions to your team and management? Build remarkable engineering career?

p Then this training is for you.

p During this&nbsp;
	strong intensive, practical and entertaining&nbsp;
	| 2-day workshop you will learn principles, practices and patterns for writing readable, maintainable and effective code.

blockquote The course is based on real-world project code, stories and examples

blockquote The course includes practical Lab work

blockquote The course is updated to support #{self.version} and functional programming idioms

blockquote The course will show many frameworks in action including Spring, Hystrix and others

blockquote The course runs in a small group with a lot of discussion and experience exchange

blockquote Attendees will receive optional coding assignment for skill polishing. Homework will be reviewed and supplemented by constructive feedback.

h2 Coverage

h3
	strong Software development economy&nbsp;
	| (clean code rationale, design entropy, busting "quality is expensive" myth, consequences of bad code)
h3
	strong Principles, rules, laws and dilemmas&nbsp;
	| (use-reuse paradox, specific-generic dilemma, Law of Demeter, KISS, SOLID, DRY, YAGNI, just-enough design)
h3
	strong Clean coding practices
h4 Effective Naming (principle of least astonishment, command-query separation, eliminating getters and setters, side-effects)
h4 Effective Conditionals (how and when to avoid branching, how to eliminate nested branching, making branching easy-to-read)
h4 Effective Functions (nulls vs. optionals, single level of abstraction, step-down rule, lambda or not to lambda?)
h4 Effective Classes (OO meets functional, objects vs. data structures, abstraction, coupling, cohesion)
h4 Effective Comments (when and how to avoid, alternatives)
h4 Effective Application Layer (commands, reactions, funnels)
h4 Effective Domain modeling (DDD, protecting invariants, value objects, entities, aggregates, event bus, strong and eventual consistency)
h4 Effective Persistence (transaction management, unit of work pattern, DAO vs. repository, testing data)
h4 Effective Validation (simple and complex rule validation, why Bean Validation sucks, writing custom validator)
h4 Effective Exception Handling (when and how to handle exceptions, designing exception hierarchy, checked vs. unchecked)
h4 Effective Resilience (failure modes, responding to failures, stability patterns, Hystrix)
h4 Effective Concurrency (CompletableFuture, RxJava, testing concurrency and asynchrony)
h3
	strong How to stay clean and move fast&nbsp;
	| (incremental refactoring, effective code reviews, pairing, CoPs, brown-bags, quality forecasting with Sonar)
h3
	strong â€¦ and much more!
