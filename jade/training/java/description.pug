p Do you want to write code that your teammates will admire? Develop real-world Java applications that are easy to maintain? Move fast without compromising quality?

p
	b Then this course is for you.

p During this intensive and practical 2-day workshop, you will learn how to develop 
	strong modern, clean, and maintainable 
	| applications using the latest Java best practices, patterns, and libraries. The course is designed for professional Java developers who want to expand their knowledge beyond basic and easy-to-google concepts. You will be equipped with 
	strong practical solutions to your daily coding, design, and architecture challenges.

ul
	li ⚡ Warning: in 2-days, you will unlearn old-school patterns that most Java applications suffer from.
	li ⚡ Warning: You will learn that you might not need Kotlin at all.

h2 Highlights

ul
	li The course is based on real-world project code, stories and examples.

	li The course demos are built using real-world libraries such as Spring, Hibernate, and Guava.

	li The course includes practical Lab work and an optional homework assignment.

	li The course is updated to support Java #{self.javaVersion} additions and functional programming idioms (but is relevant for apps that run on older Java versions).

	li You will get a list of books, videos, GitHub projects to learn from, and lifetime support from Eduards.


h2 You'll learn how to

ul
  li Write readable, modular, and testable code using advanced clean coding techniques.
	li Control complexity of your apps using micromodules and clean architecture. 
	li Mix and apply modern object-oriented, functional, and reactive design patterns.
	li Turn buzzwords such as SOLID, GRASP, and SLAP into real practice.
	li Craft expressive domain models using DDD patterns.
	li Design a flexible service layer with CQRS, Commands, Reactions and Pipelines.	
	li Decouple classes, packages and services using event bus, scheduling, and eventual consistency.
	li Define and enforce the consistency of architecture and design with ArchUnit.
	li Design slim data access layer with Hibernate and jOOQ.
	li Add fault tolerance to your application using Hystrix and Resilience4j.
	li Understand what to test and how to test with Spock.
	li … and much more!

p Ready to upgrade your coding skills and build Java applications that don't suck? Join in!

