p Do you want to write code that your teammates will admire? Develop enterprise applications that are easy and fun to maintain? Apply modern coding techniques, patterns, and libraries to your projects?  

p
	b Then this course is for you.

p During this intensive and practical 2-day workshop, you will learn how to develop 
	strong modern, clean, and maintainable 
	| applications using the latest Java best practices, frameworks, and libraries. The course is designed for professional Java developers who want to expand their knowledge beyond basic and easy-to-google concepts. You will be equipped with 
	strong practical solutions to your daily coding, design, and architecture challenges.

ul
	li âš¡ Warning: in 2-days, you will unlearn old-school patterns that most Java applications suffer from.
	li âš¡ Warning: You will learn that you might not need Kotlin at all.

h2 Highlights

ul
	li The course is based on real-world project code, stories and examples.

	li The course demos are built using real-world libraries such as Spring, Hibernate, and Guava.

	li The course includes practical Lab work and an optional homework assignment.

	li The course is updated to support Java #{self.javaVersion} additions and functional programming idioms (but is relevant for apps that run on older Java versions).

	li You will get a list of books, videos, GitHub projects to learn from, and lifetime support from Eduards.


h2 You'll learn how to

ul
	li Design a lightweight and pragmatic architecture for your enterprise app. ðŸš€ 
	li Mix and apply modern object-oriented, functional, and reactive design patterns.
	li Write an expressive, readable, modular, and testable code that even grandma can understand.
	li Turn buzzwords such as SOLID, GRASP, and SLAP into real practice.
	li Keep code complexity under tight control and get out of technical debt.
	li Craft a rich domain model with the business logic using real-world DDD and Clean Code techniques.
	li Design a flexible service layer with CQRS, Commands, Reactions and Pipelines.	
	li Decouple classes, packages and services using event bus, scheduling, and eventual consistency.
	li Define and enforce the consistency of architecture and design.
	li Deal with data like a boss, and make Hibernate (and jOOQ) work for you (not the other way around).
	li Implement fault tolerance patterns such as Retries, Bulkheads and Circuit Breakers in modern Java.
	li Understand what to test, how to test, and how to find a balance between the unit and high-level testing.
	li â€¦ and much more!

p Ready to upgrade your coding skills and build Java applications that don't suck? Join in!

