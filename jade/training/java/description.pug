p Do you want to feel proud of your work? Write code that your colleagues will admire? Move fast without compromising quality? Build long-living software that is easy and fun to maintain? Get out of technical debt without big upfront time investment? Professionally articulate technical decisions to your team and management? Build remarkable engineering career?

p Then this training is for you.

p During this
	strong  intensive, practical and entertaining
	|  2-day workshop you will learn principles, practices and patterns for writing readable, maintainable and effective code in modern Java.

h2 Highlights

ul
	li The course is based on real-world project code, stories and examples

	li The course includes practical Lab work

	li The course is updated to support #{self.version} and functional programming idioms

	li The course will show many frameworks in action including Spring, Hystrix and others

	li The course runs in a small group with a lot of discussion and experience exchange. All your questions will be heard and addressed.

	li Attendees will receive the optional coding assignment for skill polishing. Homework will be reviewed and supplemented by constructive feedback.

	li Attendees will receive references to books, videos and GitHub projects for continuous, independent self-development.

h2 Coverage

ul
	li
		strong Understanding the economics of software design
		|  (clean code rationale, design entropy, busting "quality is expensive" myth, consequences of bad code)
	li
		strong Design principles, rules, laws and dilemmas
		|  (use-reuse paradox, specific-generic dilemma, Law of Demeter, KISS, SOLID, DRY, YAGNI, just-enough design)
	li 
		strong Effective Naming
		|  (principle of least astonishment, command-query separation, eliminating getters and setters, side-effects)
	li 
		strong Effective Conditionals
		|  (how and when to avoid branching, how to eliminate nested branching, making branching easy-to-read)
	li 
		strong Effective Functions 
		|  (nulls vs. optionals, SLAP principle, step-down rule, lambda or not to lambda?)
	li 
		strong Effective Classes
		|  (OO meets functional, objects vs. data structures, abstraction, coupling, cohesion)
	li 
		strong Effective Comments
		|  (when and how to avoid, alternatives)
	li 
		strong Effective Application/Service Layer
		|  (commands, reactions, funnels)
	li 
		strong Effective Domain modeling
		|  (DDD, protecting invariants, value objects, entities, aggregates, event bus, strong and eventual consistency)
	li 
		strong Effective Persistence 
		|  (transaction management, unit of work pattern, DAO vs. repository, testing data)
	li 
		strong Effective Validation
		|  (mixing simple and complex rule validation, why Bean Validation sucks, writing custom validator)
	li 
		strong Effective Exception Handling
		|  (when and how to handle exceptions, designing exception hierarchy, checked vs. unchecked)
	li 
		strong Effective Resilience
		|  (failure modes, responding to failures, stability patterns, Hystrix)
	li 
		strong Effective Concurrency
		|  (CompletableFuture, RxJava, testing concurrency and asynchrony)
	li
		strong How to stay clean and move fast
		|  (incremental refactoring, effective code reviews, pairing, CoPs, brown-bags, quality forecasting with Sonar)
	li
		strong â€¦ and much more!
