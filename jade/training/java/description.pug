p Do you want to write code that you and your teammates will enjoy? Do you want to develop Java application that are easy to evolve and maintain? Do you want to learn state-of-the-art coding techniques, frameworks and libraries? Then this 2-day course is for you.

p During this intensive, practical and entertaining workshop you will learn how to develop 
	strong modern, clean and maintainable 
	| applications using the latest Java best practices, frameworks and libraries.

p The course is designed for Java developers who want to expand their knowledge beyond basic and easy-to-google concepts. You will be equipped with 
	strong practical solutions to your daily coding, design and architecture challenges.

ul
	li Warning: in 2-days, you will unlearn old-school patterns that most Java application suffer from.

h2 Highlights

ul
	li The course is based on real-world project code, stories and examples.

	li The course will show many frameworks in action including Spring Boot, Resilience4j and others.

	li The course includes practical Lab work.

	li The course is updated to support Java #{self.javaVersion} additions and functional programmig idioms.

	li The course runs in a small group with lots of discussion and experience exchange.

	li You will receive the optional homework coding assignment. Homework will be reviewed and supplemented by detailed feedback.

	li You will receive a list of books, videos, GitHub projects, and people to follow, so you can continue your self-development.


h2 Coverage

ul
	li How to apply modern object-oriented and functional design patterns and mix them together.
	li How to write small, testable, readable, objects that everyone can understand.
	li How to get rid of boilerplate, nulls, getters, setters, helper classes, and unnecessary AbstractSingletonServiceFactoryFacadeManagerBeans.
	li How to craft expressive and maintainable domain models using the best parts of Domain-Driven Design.
	li How to deal with business and technical exceptions like a pro. Creating exceptions that make DevOps people happy.
	li How to design lightweight, yet flexible service and application layer with CQRS, Commands, Reactions and Pipelines.
	li How to decouple classes, packages and services using events, side-effects, down-to-earth layering and ArchUnit.
	li How to implement robust validation using Secure by Desing principles and mixing it with Bean Validator framework.
	li How to deal with data like a boss, and make JPA and Hibernate work for you (not the other way around).
	li How to make application production-ready with Fault Tolerance Patterns and Resilience4j.
	li How to apply good design principles, rules and laws in action (SOLID, GoF, SLAP).
	li How to benefit from the latest Java, Spring Boot, Hibernate, and Guava goodies.
	li How to test and mock the file system, async operations, integrations and REST APIs.
	li â€¦ and much more!

p Ready to upgrade your coding skills and build Java applications that don't suck? Join in!

